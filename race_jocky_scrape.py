import requests
from bs4 import BeautifulSoup
import pandas as pd
import time
from datetime import datetime
import re
def scrape_race_info(url, session):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    try:
        response = session.get(url, headers=headers)
        response.encoding = response.apparent_encoding
        
        if response.status_code != 200:
            return None, None
        
        soup = BeautifulSoup(response.text, 'html.parser')
        
        race_title = soup.select_one('dd h1')
        if not race_title:
            return None, None
        
        race_info = {}
        race_info['レース名'] = race_title.text.strip()
        
        detail_span = soup.select_one('dd span')
        if detail_span:
            race_details = detail_span.text.strip().split('/')
            if len(race_details) >= 3:
                race_info['距離'] = race_details[0].strip()
                race_info['天候'] = race_details[1].split(':')[1].strip()
                race_info['馬場状態'] = race_details[2].split(':')[1].strip()
            else:
                race_info['距離'] = "不明"
                race_info['天候'] = "不明"
                race_info['馬場状態'] = "不明"
        else:
            race_info['距離'] = "不明"
            race_info['天候'] = "不明"
            race_info['馬場状態'] = "不明"
        
        small_txt = soup.select_one('p.smalltxt')
        if small_txt:
            small_txt = small_txt.text.strip()
            date_match = re.search(r'(\d{4})年(\d{1,2})月(\d{1,2})日', small_txt)
            if date_match:
                year = date_match.group(1)
                month = date_match.group(2).zfill(2)
                day = date_match.group(3).zfill(2)
                race_info['開催日'] = f"{year}{month}{day}"
            else:
                race_info['開催日'] = "不明"
        else:
            race_info['開催日'] = "不明"
        
        rows = soup.select('table.race_table_01 tr')[1:]
        race_info['出馬数'] = len(rows)
        
        results = []
        for row in rows:
            cols = row.select('td')
            if not cols:
                continue
                
            horse_name_el = cols[3].select_one('a')
            if not horse_name_el:
                continue
                
            horse_name = horse_name_el.text.strip()
            horse_url = "https://db.netkeiba.com" + horse_name_el.get('href', '')
            
            # 騎手情報の取得
            jockey_link = cols[6].select_one('a')
            jockey_name = ''
            jockey_url = ''
            jockey_id = ''
            
            if jockey_link:
                jockey_name = jockey_link.text.strip()
                jockey_href = jockey_link.get('href', '')
                jockey_id = jockey_href.split('/')[-2] if jockey_href else ''
                jockey_url = f"https://db.netkeiba.com/jockey/{jockey_id}/" if jockey_id else ''
            
            result = {
                'レース名': race_info['レース名'],
                '開催日': race_info['開催日'],
                '距離': race_info['距離'],
                '天候': race_info['天候'],
                '馬場状態': race_info['馬場状態'],
                'URL': url,
                '出馬数': race_info['出馬数'],
                '着順': cols[0].text.strip(),
                '枠番': cols[1].text.strip(),
                '馬名': horse_name,
                '馬URL': horse_url,
                '性齢': cols[4].text.strip(),
                '斤量': cols[5].text.strip(),
                '騎手': jockey_name,
                '騎手URL': jockey_url,
                '騎手番号': jockey_id,
                '単勝': cols[12].text.strip() if len(cols) > 12 else "",
                '人気': cols[13].text.strip() if len(cols) > 13 else "",
                '馬体重': cols[14].text.strip() if len(cols) > 14 else ""
            }
            results.append(result)
        
        return race_info, pd.DataFrame(results)
        
    except Exception as e:
        print(f"エラー {url}: {str(e)}")
        return None, None

def scrape_race_urls():
    base_urls = ["202506030401", "202506030402", "202506030403", "202506030404", "202506030405", "202506030406", "202506030407", "202506030408", "202506030409", "202506030410", "202506030411", "202506030412", "202509020401", "202509020402", "202509020403", "202509020404", "202509020405", "202509020406", "202509020407", "202509020408",
"202509020409", "202509020410", "202509020411", "202509020412", "202506030301", "202506030302", "202506030303", "202506030304", "202506030305", "202506030306", "202506030307", "202506030308", "202506030309", "202506030310", "202506030311", "202506030312", "202509020301", "202509020302", "202509020303", "202509020304",
"202509020305", "202509020306", "202509020307", "202509020308", "202509020309", "202509020310", "202509020311", "202509020312", "202506030201", "202506030202", "202506030203", "202506030204", "202506030205", "202506030206", "202506030207", "202506030208", "202506030209", "202506030210", "202506030211", "202506030212",
"202507020601", "202507020602", "202507020603", "202507020604", "202507020605", "202507020606", "202507020607", "202507020608", "202507020609", "202507020610", "202507020611", "202507020612", "202509020201", "202509020202", "202509020203", "202509020204", "202509020205", "202509020206", "202509020207", "202509020208",
"202509020209", "202509020210", "202509020211", "202509020212", "202506030101", "202506030102", "202506030103", "202506030104", "202506030105", "202506030106", "202506030107", "202506030108", "202506030109", "202506030110", "202506030111", "202506030112", "202507020501", "202507020502", "202507020503", "202507020504",
"202507020505", "202507020506", "202507020507", "202507020508", "202507020509", "202507020510", "202507020511", "202507020512", "202509020101", "202509020102", "202509020103", "202509020104", "202509020105", "202509020106", "202509020107", "202509020108", "202509020109", "202509020110", "202509020111", "202509020112",
"202506020801", "202506020802", "202506020803", "202506020804", "202506020805", "202506020806", "202506020807", "202506020808", "202506020809", "202506020810", "202506020811", "202506020812", "202507020401", "202507020402", "202507020403", "202507020404", "202507020405", "202507020406", "202507020407", "202507020408",
"202507020409", "202507020410", "202507020411", "202507020412", "202509010801", "202509010802", "202509010803", "202509010804", "202509010805", "202509010806", "202509010807", "202509010808", "202509010809", "202509010810", "202509010811", "202509010812", "202506020701", "202506020702", "202506020703", "202506020704",
"202506020705", "202506020706", "202506020707", "202506020708", "202506020709", "202506020710", "202506020711", "202506020712", "202507020301", "202507020302", "202507020303", "202507020304", "202507020305", "202507020306", "202507020307", "202507020308", "202507020309", "202507020310", "202507020311", "202507020312",
"202509010701", "202509010702", "202509010703", "202509010704", "202509010705", "202509010706", "202509010707", "202509010708", "202509010709", "202509010710", "202509010711", "202509010712", "202506020601", "202506020602", "202506020603", "202506020604", "202506020605", "202506020606", "202506020607", "202506020608",
"202506020609", "202506020610", "202506020611", "202506020612", "202507020201", "202507020202", "202507020203", "202507020204", "202507020205", "202507020206", "202507020207", "202507020208", "202507020209", "202507020210", "202507020211", "202507020212", "202509010601", "202509010602", "202509010603", "202509010604",
"202509010605", "202509010606", "202509010607", "202509010608", "202509010609", "202509010610", "202509010611", "202509010612", "202506020501", "202506020502", "202506020503", "202506020504", "202506020505", "202506020506", "202506020507", "202506020508", "202506020509", "202506020510", "202506020511", "202506020512",
"202507020101", "202507020102", "202507020103", "202507020104", "202507020105", "202507020106", "202507020107", "202507020108", "202507020109", "202507020110", "202507020111", "202507020112", "202509010501", "202509010502", "202509010503", "202509010504", "202509010505", "202509010506", "202509010507", "202509010508",
"202509010509", "202509010510", "202509010511", "202509010512", "202506020401", "202506020402", "202506020403", "202506020404", "202506020405", "202506020406", "202506020407", "202506020408", "202506020409", "202506020410", "202506020411", "202506020412", "202509010401", "202509010402", "202509010403", "202509010404",
"202509010405", "202509010406", "202509010407", "202509010408", "202509010409", "202509010410", "202509010411", "202509010412", "202506020301", "202506020302", "202506020303", "202506020304", "202506020305", "202506020306", "202506020307", "202506020308", "202506020309", "202506020310", "202506020311", "202506020312",
"202509010301", "202509010302", "202509010303", "202509010304", "202509010305", "202509010306", "202509010307", "202509010308", "202509010309", "202509010310", "202509010311", "202509010312", "202506020201", "202506020202", "202506020203", "202506020204", "202506020205", "202506020206", "202506020207", "202506020208",
"202506020209", "202506020210", "202506020211", "202506020212", "202509010201", "202509010202", "202509010203", "202509010204", "202509010205", "202509010206", "202509010207", "202509010208", "202509010209", "202509010210", "202509010211", "202509010212", "202510011201", "202510011202", "202510011203", "202510011204",
"202510011205", "202510011206", "202510011207", "202510011208", "202510011209", "202510011210", "202510011211", "202510011212", "202506020101", "202506020102", "202506020103", "202506020104", "202506020105", "202506020106", "202506020107", "202506020108", "202506020109", "202506020110", "202506020111", "202506020112",
"202509010101", "202509010102", "202509010103", "202509010104", "202509010105", "202509010106", "202509010107", "202509010108", "202509010109", "202509010110", "202509010111", "202509010112", "202510011101", "202510011102", "202510011103", "202510011104", "202510011105", "202510011106", "202510011107", "202510011108",
"202510011109", "202510011110", "202510011111", "202510011112", "202505010801", "202505010802", "202505010803", "202505010804", "202505010805", "202505010806", "202505010807", "202505010808", "202505010809", "202505010810", "202505010811", "202505010812", "202508010801", "202508010802", "202508010803", "202508010804",
"202508010805", "202508010806", "202508010807", "202508010808", "202508010809", "202508010810", "202508010811", "202508010812", "202510011001", "202510011002", "202510011003", "202510011004", "202510011005", "202510011006", "202510011007", "202510011008", "202510011009", "202510011010", "202510011011", "202510011012",
"202505010701", "202505010702", "202505010703", "202505010704", "202505010705", "202505010706", "202505010707", "202505010708", "202505010709", "202505010710", "202505010711", "202505010712", "202508010701", "202508010702", "202508010703", "202508010704", "202508010705", "202508010706", "202508010707", "202508010708",
"202508010709", "202508010710", "202508010711", "202508010712", "202510010901", "202510010902", "202510010903", "202510010904", "202510010905", "202510010906", "202510010907", "202510010908", "202510010909", "202510010910", "202510010911", "202510010912", "202505010601", "202505010602", "202505010603", "202505010604",
"202505010605", "202505010606", "202505010607", "202505010608", "202505010609", "202505010610", "202505010611", "202505010612", "202508010601", "202508010602", "202508010603", "202508010604", "202508010605", "202508010606", "202508010607", "202508010608", "202508010609", "202508010610", "202508010611", "202508010612",
"202510010801", "202510010802", "202510010803", "202510010804", "202510010805", "202510010806", "202510010807", "202510010808", "202510010809", "202510010810", "202510010811", "202510010812", "202505010501", "202505010502", "202505010503", "202505010504", "202505010505", "202505010506", "202505010507", "202505010508",
"202505010509", "202505010510", "202505010511", "202505010512", "202508010501", "202508010502", "202508010503", "202508010504", "202508010505", "202508010506", "202508010507", "202508010508", "202508010509", "202508010510", "202508010511", "202508010512", "202510010701", "202510010702", "202510010703", "202510010704",
"202510010705", "202510010706", "202510010707", "202510010708", "202510010709", "202510010710", "202510010711", "202510010712", "202508010301", "202508010302", "202508010303", "202508010304", "202508010305", "202508010306", "202508010307", "202508010308", "202508010309", "202508010310", "202508010311", "202508010312",
"202505010401", "202505010402", "202505010403", "202505010404", "202505010405", "202505010406", "202505010407", "202505010408", "202505010409", "202505010410", "202505010411", "202505010412", "202508010401", "202508010402", "202508010403", "202508010404", "202508010405", "202508010406", "202508010407", "202508010408",
"202508010409", "202508010410", "202508010411", "202508010412", "202510010601", "202510010602", "202510010603", "202510010604", "202510010605", "202510010606", "202510010607", "202510010608", "202510010609", "202510010610", "202510010611", "202510010612", "202505010301", "202505010302", "202505010303", "202505010304",
"202505010305", "202505010306", "202505010307", "202505010308", "202505010309", "202505010310", "202505010311", "202505010312", "202510010501", "202510010502", "202510010503", "202510010504", "202510010505", "202510010506", "202510010507", "202510010508", "202510010509", "202510010510", "202510010511", "202510010512",
"202505010201", "202505010202", "202505010203", "202505010204", "202505010205", "202505010206", "202505010207", "202505010208", "202505010209", "202505010210", "202505010211", "202505010212", "202508010201", "202508010202", "202508010203", "202508010204", "202508010205", "202508010206", "202508010207", "202508010208",
"202508010209", "202508010210", "202508010211", "202508010212", "202510010401", "202510010402", "202510010403", "202510010404", "202510010405", "202510010406", "202510010407", "202510010408", "202510010409", "202510010410", "202510010411", "202510010412", "202505010101", "202505010102", "202505010103", "202505010104",
"202505010105", "202505010106", "202505010107", "202505010108", "202505010109", "202505010110", "202505010111", "202505010112", "202508010101", "202508010102", "202508010103", "202508010104", "202508010105", "202508010106", "202508010107", "202508010108", "202508010109", "202508010110", "202508010111", "202508010112",
"202510010301", "202510010302", "202510010303", "202510010304", "202510010305", "202510010306", "202510010307", "202510010308", "202510010309", "202510010310", "202510010311", "202510010312", "202506010901", "202506010902", "202506010903", "202506010904", "202506010905", "202506010906", "202506010907", "202506010908",
"202506010909", "202506010910", "202506010911", "202506010912", "202507010901", "202507010902", "202507010903", "202507010904", "202507010905", "202507010906", "202507010907", "202507010908", "202507010909", "202507010910", "202507010911", "202507010912", "202510010201", "202510010202", "202510010203", "202510010204",
"202510010205", "202510010206", "202510010207", "202510010208", "202510010209", "202510010210", "202510010211", "202510010212", "202506010801", "202506010802", "202506010803", "202506010804", "202506010805", "202506010806", "202506010807", "202506010808", "202506010809", "202506010810", "202506010811", "202506010812",
"202507010801", "202507010802", "202507010803", "202507010804", "202507010805", "202507010806", "202507010807", "202507010808", "202507010809", "202507010810", "202507010811", "202507010812", "202510010101", "202510010102", "202510010103", "202510010104", "202510010105", "202510010106", "202510010107", "202510010108",
"202510010109", "202510010110", "202510010111", "202510010112", "202506010701", "202506010702", "202506010703", "202506010704", "202506010705", "202506010706", "202506010707", "202506010708", "202506010709", "202506010710", "202506010711", "202506010712", "202507010701", "202507010702", "202507010703", "202507010704",
"202507010705", "202507010706", "202507010707", "202507010708", "202507010709", "202507010710", "202507010711", "202507010712", "202506010601", "202506010602", "202506010603", "202506010604", "202506010605", "202506010606", "202506010607", "202506010608", "202506010609", "202506010610", "202506010611", "202506010612",
"202507010601", "202507010602", "202507010603", "202507010604", "202507010605", "202507010606", "202507010607", "202507010608", "202507010609", "202507010610", "202507010611", "202507010612", "202506010501", "202506010502", "202506010503", "202506010504", "202506010505", "202506010506", "202506010507", "202506010508",
"202506010509", "202506010510", "202506010511", "202506010512", "202507010501", "202507010502", "202507010503", "202507010504", "202507010505", "202507010506", "202507010507", "202507010508", "202507010509", "202507010510", "202507010511", "202507010512", "202506010401", "202506010402", "202506010403", "202506010404",
"202506010405", "202506010406", "202506010407", "202506010408", "202506010409", "202506010410", "202506010411", "202506010412", "202507010401", "202507010402", "202507010403", "202507010404", "202507010405", "202507010406", "202507010407", "202507010408", "202507010409", "202507010410", "202507010411", "202507010412",
"202506010301", "202506010302", "202506010303", "202506010304", "202506010305", "202506010306", "202506010307", "202506010308", "202506010309", "202506010310", "202506010311", "202506010312", "202507010301", "202507010302", "202507010303", "202507010304", "202507010305", "202507010306", "202507010307", "202507010308",
"202507010309", "202507010310", "202507010311", "202507010312", "202506010201", "202506010202", "202506010203", "202506010204", "202506010205", "202506010206", "202506010207", "202506010208", "202506010209", "202506010210", "202506010211", "202506010212", "202507010201", "202507010202", "202507010203", "202507010204",
"202507010205", "202507010206", "202507010207", "202507010208", "202507010209", "202507010210", "202507010211", "202507010212", "202506010101", "202506010102", "202506010103", "202506010104", "202506010105", "202506010106", "202506010107", "202506010108", "202506010109", "202506010110", "202506010111", "202506010112",
"202507010101", "202507010102", "202507010103", "202507010104", "202507010105", "202507010106", "202507010107", "202507010108", "202507010109", "202507010110", "202507010111", "202507010112"]  # ここに必要なURLを追加
    
    base_urls = sorted(list(set(base_urls)))
    base_url = "https://db.netkeiba.com/race/"
    all_results = []
    error_urls = []
    
    session = requests.Session()
    
    all_urls = []
    for year in range(2025, 2026):
        for base_id in base_urls:
            new_url = str(year) + base_id[4:]
            all_urls.append(new_url)
    
    total_urls = len(all_urls)
    print(f"スクレイピング開始: 合計 {total_urls} レース")
    
    for i, race_id in enumerate(all_urls, 1):
        url = base_url + race_id + "/"
        print(f"処理中 ({i}/{total_urls}): {url}")
        
        race_info, results_df = scrape_race_info(url, session)
        
        if results_df is not None:
            all_results.append(results_df)
            print(f"成功: {url}")
        else:
            error_urls.append(url)
            print(f"スキップ: {url}")
        
        time.sleep(1.0)
    
    if all_results:
        final_df = pd.concat(all_results, ignore_index=True)
        
        columns_order = [
            'レース名', '開催日', '距離', '天候', '馬場状態', 'URL',
            '出馬数', '着順', '枠番', '馬名', '馬URL', '性齢', '斤量', 
            '騎手', '騎手URL', '騎手番号',  
            '単勝', '人気', '馬体重'
        ]
        final_df = final_df[columns_order]
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        output_filename = f'race_results_{timestamp}.csv'
        final_df.to_csv(output_filename, index=False, encoding='utf-8-sig')
        
        if error_urls:
            with open(f'error_urls_{timestamp}.txt', 'w') as f:
                for err_url in error_urls:
                    f.write(f"{err_url}\n")
        
        print(f"\n処理完了:")
        print(f"成功: {len(all_results)} レース")
        print(f"失敗: {len(error_urls)} レース")
        print(f"結果は {output_filename} に保存されました")
        
        return final_df
    
    return None

if __name__ == "__main__":
    scrape_race_urls()